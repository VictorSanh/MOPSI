#include "outils.h"



using namespace Imagine;

void InitRandom(){
	srand((unsigned int)time(0));
}

// liste des taux de croissance experimentaux
int taux_experience[512] = {0.0274,0.0274,0.0307,0.0312,0.0338,0.0337,0.0332,0.0333,0.0359,0.0355,0.0353,0.0343,0.0353,0.0348,0.0351,0.0343,0.0368,0.0361,0.0366,0.0354,0.0369,
0.0356,0.0359,0.0353,0.0369,0.0361,0.0368,0.0354,0.0361,0.0357,0.036,0.0348,0.0377,0.0368,0.0374,0.0362,0.0367,0.0365,0.0367,0.0357,0.0374,0.0364,
0.0372,0.0361,0.0368,0.036,0.0371,0.0354,0.0372,0.0369,0.0373,0.0356,0.0376,0.0369,0.0368,0.0355,0.0372,0.0361,0.0374,0.0364,0.0369,0.0368,0.0367,
0.035,0.0386,0.0377,0.0379,0.0372,0.0379,0.0374,0.0375,0.0363,0.0379,0.0371,0.038,0.0368,0.0375,0.0367,0.0368,0.0351,0.0375,0.0375,0.038,0.0367,0.0374,
0.0366,0.0368,0.0363,0.038,0.0371,0.0374,0.0369,0.0366,0.0369,0.0366,0.0351,0.038,0.0376,0.0379,0.0371,0.038,0.0376,0.0372,0.0361,0.0384,0.0372,0.0385,
0.0371,0.0373,0.0371,0.0372,0.0358,0.0382,0.0374,0.0373,0.0366,0.0376,0.0371,0.0376,0.0364,0.0377,0.0369,0.0378,0.0366,0.0366,0.0365,0.0366,0.0343,
0.0388,0.0375,0.0381,0.0374,0.0382,0.0374,0.0375,0.0364,0.0383,0.0368,0.038,0.0378,0.0378,0.037,0.0371,0.0359,0.0382,0.0381,0.0383,0.0365,0.0382,
0.0375,0.0376,0.0365,0.0382,0.0367,0.0381,0.0367,0.0371,0.0371,0.0369,0.0354,0.0388,0.0379,0.0385,0.0368,0.0383,0.0375,0.0373,0.0365,0.038,0.0373,
0.0382,0.0367,0.0375,0.037,0.0371,0.0362,0.0378,0.0371,0.0374,0.0364,0.038,0.0374,0.037,0.0364,0.0371,0.0369,0.0377,0.0364,0.0365,0.0366,0.0361,
0.0354,0.0381,0.0372,0.038,0.0375,0.0385,0.0385,0.0376,0.037,0.0384,0.0376,0.0382,0.0368,0.0376,0.0373,0.0371,0.0359,0.0383,0.038,0.0383,0.0372,
0.0378,0.0376,0.038,0.0363,0.038,0.0376,0.0381,0.0372,0.0375,0.037,0.0372,0.0357,0.0384,0.0376,0.0382,0.0373,0.0378,0.0366,0.0375,0.0363,0.0381,
0.0383,0.0385,0.037,0.0383,0.0371,0.0372,0.0366,0.0381,0.0368,0.038,0.0366,0.0376,0.0375,0.0374,0.0363,0.0378,0.0371,0.0375,0.0368,0.0374,0.0369,
0.0369,0.0347,0.0373,0.0368,0.0376,0.0364,0.0388,0.0371,0.0386,0.0364,0.0384,0.038,0.0372,0.0385,0.0377,0.0388,0.0376,0.0375,0.0386,0.0369,0.0384,
0.0364,0.037,0.0381,0.0379,0.0386,0.0372,0.0364,0.0378,0.0365,0.0375,0.035,0.0374,0.0366,0.0377,0.0369,0.0371,0.0361,0.0383,0.0378,0.0359,0.0346,
0.0383,0.0388,0.0389,0.0385,0.0387,0.0379,0.0374,0.0371,0.0374,0.0389,0.0363,0.0352,0.0371,0.0377,0.039,0.0365,0.0367,0.036,0.0379,0.0356,0.0353,
0.0372,0.0365,0.0337,0.0398,0.0377,0.0385,0.0378,0.0382,0.0378,0.038,0.0377,0.0384,0.0373,0.0382,0.0366,0.0377,0.0374,0.038,0.0364,0.0381,0.037,
0.0383,0.0356,0.0383,0.038,0.0389,0.0377,0.038,0.0369,0.0379,0.0356,0.0375,0.0362,0.0356,0.0368,0.0394,0.0369,0.0386,0.0375,0.038,0.035,0.0364,
0.0361,0.0397,0.0373,0.0382,0.0366,0.038,0.0362,0.0356,0.0357,0.0385,0.0372,0.0379,0.0371,0.0382,0.0377,0.0371,0.0361,0.0383,0.0364,0.0371,0.0356,
0.0363,0.036,0.036,0.0365,0.0391,0.0378,0.0389,0.0356,0.037,0.0377,0.0365,0.0362,0.0396,0.0373,0.0379,0.0373,0.0358,0.0365,0.0373,0.037,0.0378,
0.0388,0.0377,0.0367,0.0382,0.0385,0.0378,0.0363,0.0386,0.0356,0.0376,0.0358,0.0374,0.037,0.0361,0.035,0.0396,0.0384,0.0381,0.0378,0.0375,0.038,
0.0382,0.0367,0.0387,0.0376,0.0386,0.0381,0.0379,0.0369,0.0373,0.0353,0.0383,0.0366,0.0361,0.0354,0.037,0.0381,0.037,0.0375,0.0383,0.0366,0.0389,
0.0368,0.0377,0.0375,0.0372,0.0347,0.0392,0.037,0.0389,0.0363,0.0394,0.0395,0.0392,0.0382,0.0382,0.0372,0.0396,0.0385,0.0374,0.0366,0.0362,0.0358,
0.0393,0.0378,0.0375,0.0369,0.0388,0.0375,0.0374,0.0373,0.039,0.0355,0.0383,0.0381,0.0382,0.0357,0.0361,0.0339,0.0381,0.0371,0.0379,0.0368,0.0381,
0.038,0.0379,0.0357,0.0391,0.0378,0.0376,0.0365,0.0354,0.0377,0.0367,0.0371,0.0365,0.0376,0.037,0.0356,0.0366,0.0359,0.0382,0.0364,0.0367,
0.0358,0.0377,0.0359,0.0355,0.0374,0.0358,0.0366,};

// faire une liste des taux de croissance simules par parcours de l'arbre en largeur


void liste_taux_simules(stack <double>& pile_taux, queue <IntTree*> file_arbres){
	if(file_arbres.empty()){
		cout << "c'est fini !" <<endl;
	}	
	else{
		int size = file_arbres.size();
		for(int i = 0; i< size; i++){
			IntTree* current_tree = file_arbres.front();
			double newTaux = current_tree->getTauxCroissance();
			pile_taux.push(newTaux);
			cout << pile_taux.top()<<endl;
			for(int j = 0; j<(*current_tree).sons.size(); j++){
				file_arbres.push((*current_tree).sons[j]);			
			}
			file_arbres.pop();
			i++;
		}	
		liste_taux_simules(pile_taux,file_arbres);	 
	}
	 
}


//comparer les deux listes
double squared_error(const stack <double>& pile_taux){
	
	stack<double> t = pile_taux;
	
	
}

void afficher(const stack<double>& pile){

        stack<double> t = pile;

        while(!t.empty()){

                cout << t.top();
                t.pop();
                if(!t.empty())
                        cout << " , ";
        }

}


double Random(double a, double b){
	double x = double(rand()) / RAND_MAX;
	return a + (b - a)*x;
}

double gaussienne(double mu, double sigma){
	//génération de gaussienne selon la méthode de Box Muller
	double y, z;
	double x1, x2;
	x1 = Random(0, 1);
	x2 = Random(0, 1);
	y = sqrt(-2 * log(x1))*cos(2 * 3.1415*x2);
	z = mu + sigma*y;
	return z;
}

void verifie_gaussienne(){
	//à mettre dans le main pour vérifier
	double tab[100];
	for (int i = 0; i<100; i++){
		tab[i] = gaussienne(0, 1);
	}

	int histogramme[4];
	for (int i = 0; i<100; i++){
		if (tab[i] <= -2)
			histogramme[0] += 1;
		else if (tab[i] > -2 && tab[i] <= 0)
			histogramme[1] += 1;
		else if (tab[i]>0 && tab[i] <= 2)
			histogramme[2] += 1;
		else if (tab[i]>2){
			histogramme[3] += 1;
		}
	}
	for (int i = 0; i<4; i++){
		drawLine(20 * i, 512, 20 * i, 512 - histogramme[i], BLUE, 10);
	}
}
